// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Attri.Runtime.Formatters.Attri.Runtime
{
    public sealed class Vector2IntAttributeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Attri.Runtime.Vector2IntAttribute>
    {
        // values
        private static global::System.ReadOnlySpan<byte> GetSpan_values() => new byte[1 + 6] { 166, 118, 97, 108, 117, 101, 115 };
        // name
        private static global::System.ReadOnlySpan<byte> GetSpan_name() => new byte[1 + 4] { 164, 110, 97, 109, 101 };
        // attributeType
        private static global::System.ReadOnlySpan<byte> GetSpan_attributeType() => new byte[1 + 13] { 173, 97, 116, 116, 114, 105, 98, 117, 116, 101, 84, 121, 112, 101 };
        // dimension
        private static global::System.ReadOnlySpan<byte> GetSpan_dimension() => new byte[1 + 9] { 169, 100, 105, 109, 101, 110, 115, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Attri.Runtime.Vector2IntAttribute value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_values());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Attri.Runtime.FrameData<global::UnityEngine.Vector2Int>>>(formatterResolver).Serialize(ref writer, value.values, options);
            writer.WriteRaw(GetSpan_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.name, options);
            writer.WriteRaw(GetSpan_attributeType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Attri.Runtime.AttributeType>(formatterResolver).Serialize(ref writer, value.attributeType, options);
            writer.WriteRaw(GetSpan_dimension());
            writer.Write(value.dimension);
        }

        public global::Attri.Runtime.Vector2IntAttribute Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __values__IsInitialized = false;
            var __values__ = default(global::System.Collections.Generic.List<global::Attri.Runtime.FrameData<global::UnityEngine.Vector2Int>>);
            var __name__ = default(string);
            var __attributeType__ = default(global::Attri.Runtime.AttributeType);
            var __dimension__ = default(ushort);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879598928246UL) { goto FAIL; }

                        __values__IsInitialized = true;
                        __values__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Attri.Runtime.FrameData<global::UnityEngine.Vector2Int>>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667182UL) { goto FAIL; }

                        __name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_attributeType().Slice(1))) { goto FAIL; }

                        __attributeType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Attri.Runtime.AttributeType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_dimension().Slice(1))) { goto FAIL; }

                        __dimension__ = reader.ReadUInt16();
                        continue;

                }
            }

            var ____result = new global::Attri.Runtime.Vector2IntAttribute(__name__, __attributeType__, __dimension__);
            if (__values__IsInitialized)
            {
                ____result.values = __values__;
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
